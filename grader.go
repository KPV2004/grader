package grader

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sync"
	"time"
)

type Grader struct {
	pathOfSource         string
	pathOfInput          string
	pathOfOutput         string
	pathOfExpectedOutput string
}

func (g *Grader) InitGrader(pathOfSource string, pathOfInput string, pathOfOutput string, pathOfExpectedOutput string) {
	g.pathOfSource = pathOfSource
	g.pathOfInput = pathOfInput
	g.pathOfOutput = pathOfOutput
	g.pathOfExpectedOutput = pathOfExpectedOutput
}

func (g *Grader) CompileSource(fileName string, fileType string) error {
	sourceFile := filepath.Join(g.pathOfSource, fileName+"."+fileType)
	outputFile := filepath.Join(g.pathOfSource, fileName)

	compileCmd := exec.Command("g++", "-o", outputFile, sourceFile)
	if err := compileCmd.Run(); err != nil {
		return fmt.Errorf("‚ùå Compile error in %s: %v", fileName, err)
	}

	fmt.Printf("‚úÖ Compile success in %s\n", fileName)
	return nil
}

func (g *Grader) RunSource(fileName string) error {
	if err := g.ClearOutputFiles(); err != nil {
		return fmt.Errorf("‚ùå Error clearing output files: %v", err)
	}
	files, err := os.ReadDir(g.pathOfInput)
	if err != nil {
		return fmt.Errorf("‚ùå Error reading input directory: %v", err)
	}

	var wg sync.WaitGroup
	errChan := make(chan error, len(files)) // Channel ‡πÄ‡∏Å‡πá‡∏ö Error
	jobs := make(chan string, 10)           // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

	// üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á Worker Pool (‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
	for i := 0; i < 10; i++ {
		go func() {
			for inputFileName := range jobs {
				if err := g.runSingleTest(fileName, inputFileName); err != nil {
					errChan <- err
				}
				wg.Done()
			}
		}()
	}

	// üîπ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ Queue (jobs)
	for _, file := range files {
		wg.Add(1)
		jobs <- file.Name()
	}
	close(jobs) // ‡∏õ‡∏¥‡∏î Channel ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏™‡πà‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß

	wg.Wait() // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Worker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
	close(errChan)

	// ‚úÖ ‡∏£‡∏ß‡∏° Error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var finalErr error
	for err := range errChan {
		if finalErr == nil {
			finalErr = err
		} else {
			finalErr = fmt.Errorf("%v\n%v", finalErr, err)
		}
	}
	return finalErr
}

func (g *Grader) runSingleTest(fileName string, inputFileName string) error {

	inputFilePath := filepath.Join(g.pathOfInput, inputFileName)
	outputFilePath := filepath.Join(g.pathOfOutput, inputFileName[:len(inputFileName)-2]+"sol")
	inputFile, err := os.Open(inputFilePath)
	if err != nil {
		return fmt.Errorf("‚ùå Error opening input file %s: %v", inputFileName, err)
	}
	defer inputFile.Close()

	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return fmt.Errorf("‚ùå Error reading output file %s: %v", inputFileName, err)
	}
	defer outputFile.Close()

	// ‡∏ï‡∏±‡πâ‡∏á Time Limit 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	startTime := time.Now()

	runCmd := exec.CommandContext(ctx, filepath.Join(g.pathOfSource, fileName))
	runCmd.Stdin = inputFile
	runCmd.Stdout = outputFile
	// output, err := runCmd.CombinedOutput()
	err = runCmd.Run()
	elapsedTime := time.Since(startTime)

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Timeout ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if ctx.Err() == context.DeadlineExceeded {
		return fmt.Errorf("‚ùå Timeout! %s took too long (>10s) with input %s", fileName, inputFileName)
	}

	if err != nil {
		return fmt.Errorf("‚ùå Run error in %s with input %s: %v", fileName, inputFileName, err)
	}

	fmt.Printf("‚úÖ Run success in %s with input %s (Time: %v)\n", fileName, inputFileName, elapsedTime)

	return nil
}

func (g *Grader) CheckOutput_StringMathcing() {
	files, err := os.ReadDir(g.pathOfOutput)
	if err != nil {
		fmt.Println("‚ùå Error reading output directory:", err)
		return
	}

	for _, file := range files {
		outputFileName := file.Name()
		outputFilePath := filepath.Join(g.pathOfOutput, outputFileName)
		expectedOutputFilePath := filepath.Join(g.pathOfExpectedOutput, outputFileName)

		outputFile, err := os.ReadFile(outputFilePath)
		if err != nil {
			fmt.Println("‚ùå Error reading output file:", err)
			return
		}

		expectedOutputFile, err := os.ReadFile(expectedOutputFilePath)
		if err != nil {
			fmt.Println("‚ùå Error reading expected output file:", err)
			return
		}

		if string(outputFile) == string(expectedOutputFile) {
			fmt.Printf("‚úÖ Test %s passed\n", outputFileName)
		} else {
			fmt.Printf("‚ùå Test %s failed\n", outputFileName)
		}
	}

}

func (g *Grader) ClearOutputFiles() error {
	files, err := os.ReadDir(g.pathOfOutput)
	if err != nil {
		return fmt.Errorf("‚ùå Error reading output directory: %v", err)
	}

	for _, file := range files {
		filePath := filepath.Join(g.pathOfOutput, file.Name())
		if err := os.Remove(filePath); err != nil {
			return fmt.Errorf("‚ùå Error deleting file %s: %v", filePath, err)
		}
	}

	fmt.Println("‚úÖ All output files deleted successfully")
	return nil
}
